package main

import (
	"testing"

	"github.com/DATA-DOG/go-sqlmock"
	_ "github.com/joho/godotenv/autoload"
	"github.com/riyanda432/belajar-authentication/src/infra/config"
	infra_persistence_postgress "github.com/riyanda432/belajar-authentication/src/infra/persistence/postgres"
	"github.com/sirupsen/logrus"
	"github.com/stretchr/testify/assert"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

func Test_main_closeDbSuccess(t *testing.T) {
	oldpostgresNew := postgresNew
	oldconfigMake := configMake
	defer func() {
		postgresNew = oldpostgresNew
		configMake = oldconfigMake

		r := recover()
		assert.NotNil(t, r)
	}()

	configMake = func() config.Config {
		return config.Config{
			App: config.AppConf{
				Environment: "LOCAL",
			},
		}
	}
	db, mockDB, _ := sqlmock.New()
	dialector := postgres.New(postgres.Config{
		DSN:                  "sqlmock_db_0",
		DriverName:           "postgres",
		Conn:                 db,
		PreferSimpleProtocol: true,
	})
	mockDB.ExpectClose()
	gormDb := &gorm.DB{
		Config: &gorm.Config{
			ConnPool:  db,
			Dialector: dialector,
		},
	}
	sqlDB, _ := gormDb.DB()
	postgresNew = func(
		conf config.SqlDbConf,
		logger *logrus.Logger,
	) *infra_persistence_postgress.PostgresDb {
		return &infra_persistence_postgress.PostgresDb{
			DB:    gormDb,
			SqlDB: sqlDB,
		}
	}
	main()
}

